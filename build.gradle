buildscript {
    repositories {
        jcenter()
        maven { 
        	url = "http://files.minecraftforge.net/maven" 
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}


repositories {
    maven {
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }
    maven { // TOP
        name 'tterrag maven'
        url "http://maven.tterrag.com/"
    }
    maven { // compatlayer
        name 'K-4u maven'
        url "http://maven.k-4u.nl/"
    }
    maven {
        name 'forge'
        url 'http://files.minecraftforge.net/maven'
    }
    maven {
         name "Tehnut Maven FS"
         url "http://tehnut.info/maven"
    }
    maven {
        name = "CoFH Maven"
        url = "http://maven.covers1624.net"
    }
  	maven {
		url "http://www.ryanliptak.com/maven/"
	}
}

apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.


version = "0.6.2"
group = "iblis" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "iblis"

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = "1.12.2-14.23.2.2611"
    runDir = "run"
    mappings = "snapshot_20170822"
}

jar {
    manifest {
        attributes("Manifest-Version": "1.0",
		"FMLAT": "iblis_at.cfg")
    }
}

task headshots(type: Jar) {  
    dependsOn "build"
	version = "1.2.6"
	baseName = "iblis-headshots"
    from zipTree(jar.outputs.getFiles().getSingleFile()).matching {
        exclude "iblis/**"
        exclude "assets/iblis/**"
    }
    manifest {
        attributes("Manifest-Version": "1.0",
		"FMLAT": "iblis_at.cfg")
    }
}

task dev(type: Jar) {  
    from(sourceSets.main.output)
    classifier = "dev"
}

dependencies {
	deobfCompile "applecore:AppleCore:1.12.2-3.1.3:deobf"
	deobfCompile "slimeknights.mantle:Mantle:1.12-1.3.1.21"
    deobfCompile "slimeknights:TConstruct:1.12-2.7.4.40"
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
